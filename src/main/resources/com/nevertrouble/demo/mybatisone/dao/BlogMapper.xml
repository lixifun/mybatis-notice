<?xml version="1.0" encoding="UTF-8" ?>

<!--此处的  mybatis-3-mapper.dtd 是 mapper.xml 的约束文件校验其合法性，还有在 idea 中输入的时候的引导-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--此 mapper.xml 对应的命名空间
    一个 namespace 对应一个二级缓存
-->
<mapper namespace="com.nevertrouble.demo.mybatisone.dao.BlogMapper">

    <!--
        mybatis 允许增删改查直接定义以下类型的返回值

        - Integer
        - Long
        - Boolean

        表明其是否有数据被修改或有多少数据被修改被查询
    -->

    <!--
        主键生成问题

        自增主键的获取 mybatis 也是利用 statement.getGeneratedKeys()

        获取自增主键
            useGeneratedKeys="true" 默认是 false
            keyProperty="id"        指定对应的主键属性值
        例:
            <insert useGeneratedKeys="true" keyProperty="id"/>

        对于 Oracle 不支持自增主键，需要从序列中拿值
    -->

    <insert id="addBlog" databaseId="oracle">
        <!-- keyProperty: 查出的主键值封装给 javaBean 的哪个属性
            order="BEFORE" 当前 sql 在 插入 sql 之前运行
                  "AFTER" 在之后运行
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 这里是 nextval -->
            select BLOG_SEQ.nextval from dual;
        </selectKey>
        <!-- 插入的时候从序列中拿到的值 -->
        insert into blog(BLOG_ID, TITLE, CONTENT)
        values (#{id}, #{title}, #{content})
    </insert>

    <select id="selectBlog" resultType="com.nevertrouble.demo.mybatisone.bean.Blog">
        select * from Blog where id = #{id}
    </select>

    <!--
        mybatis 的参数处理

        单个参数：
            不会做特殊处理
            #{foo} 里面写什么都能拿到值

        多个参数：
            多个参数会被封装成一个 map
                key: param1...paramN 或者参数的索引也是可以的，索引从 1 开始
                value: 就是传入的参数值

            #{paramx} 就是从 map 中获取指定 key 的值

        命名参数：
            多个参数会被封装成一个 map
                key: @Param 指定的值

            #{id} 就直接可以取到值了

        POJO:
            #{属性名} 即可

        Map:
            #{key} 即可

        Collection(List, Set) 或者数组:
            #{collection}
            #{list} #{list[0]}
            #{set}
            #{array} #{array[0]}
    -->

    <!--
        #{} 和 ${} 的区别

        #{} 是以预编译的形式，将参数设置到 sql 语句中
            PreparedStatement，防止 sql 注入

        ${} 是字符串拼接的形式，会有安全问题

        大多数情况下，取参数的值都应该使用 #{}

        原生 jdbc 不支持 占位符 的地方就要使用 ${} 来进行取值了
            - 表名的拼接
            - 排序字段，排序规则
    -->

    <!--
        动态 SQL

        - if
        - choose (when otherwise)
        - trim (where set)
        - foreach

        in (...)
        例:
            in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>

        批量保存

            <insert>
                insert into tbl_name(last_name, email, gender)
                values
                    <foreach collection="emps" item="emp" separator=",">
                        (#{emp.lastName}, #{emp.email}, #{emp.gender})
                    </foreach>
            </insert>

            特殊的 Oracle
                1. 使用 多条更新语句放到 begin-end; 中间，需要设置连接 allowMultiQueries=true
                2. 利用中间表


                方式一：
                    <insert>
                        <foreach collection="emps" item="emp" open="begin" end="end;">
                            insert into tbl_name(last_name, email, gender)
                            values (#{emp.lastName}, #{emp.email}, #{emp.gender});
                        </foreach>
                    </insert>

               方式二：
                    <insert>
                    insert into tbl_name(last_name, email, gender)
                        select lastName,email from (
                            <foreach collection="emps" item="emp" separator="union">
                                select #{emp.lastName} lastName, #{emp.email} email from dual
                            </foreach>
                        )
                    </insert>

               方式二变种:
                    <insert>
                    insert into tbl_name(last_name, email, gender)
                            <foreach collection="emps" item="emp" separator="union" open="select lastName, email from (" close=")">
                                select #{emp.lastName} lastName, #{emp.email} email from dual
                            </foreach>
                        )
                    </insert>

    -->

    <!--
         两个内置参数

         不只是方法传递过来的参数可以被用来判断，取值

         mybatis 默认还有两个内置参数
         _parameter: 代表整个参数
                    单个参数: _parameter 就是这个参数
                    多个参数: 参数会被封装成一个 map，_parameter 就是代表这个 map
         _databaseId: 如果配置了 databaseIdProvider 标签
                _databaseId 就是代表了当前数据库

                整个参数不为 null 才加条件
                <if test="_databaseId=='mysql'">
                    select * from tbl_employee
                    <if test="_parameter!=null">
                        where last_name = #{_parameter.name}
                    </if>
                </if>

                <if test="_databaseId=='oracle'">
                    select * from employee
                </if>
     -->

    <!--
        bind 常用于字符拼接

        <bind name="_lastName" value="'%'+lastName+'%'">
    -->


    <!--
        抽取可重用的 sql 片段

            1. 经常将要查询的列名或者插入用的列名抽取出来方便引用
            2. include 来引用已经抽取的 sql
            3. include 还可以自定义一些 property，sql标签内部就能使用自定义的属性
                ${prop} 注意这里用的是 $ 不是 #

            <include refid="sql片段标识"></include>
    -->

    <!--

        <where> 标签可用于去除多余的 and
        <set> 标签可用于去除多余的 逗号

    -->

</mapper>
